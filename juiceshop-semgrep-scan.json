{
  "errors": [
    {
      "code": 2,
      "level": "warn",
      "message": "Timeout when running typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method on frontend/src/assets/private/three.js:\n ",
      "path": "frontend/src/assets/private/three.js",
      "rule_id": "typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method",
      "type": "Timeout"
    },
    {
      "code": 2,
      "level": "warn",
      "message": "Timeout when running typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property on frontend/src/assets/private/three.js:\n ",
      "path": "frontend/src/assets/private/three.js",
      "rule_id": "typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property",
      "type": "Timeout"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginAdminChallenge_3.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = $1 AND password = $2 AND deletedAt IS NULL`,\n      { bind: [ req.body.email, req.body.password ], model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginAdminChallenge_3.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginJimChallenge_3.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = ? AND password = ? AND deletedAt IS NULL`,\n      { replacements: [ req.body.email, req.body.password ], model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginJimChallenge_3.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginBenderChallenge_4.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginBenderChallenge_4.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginJimChallenge_2.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginJimChallenge_2.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginJimChallenge_1_correct.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = $1 AND password = $2 AND deletedAt IS NULL`,\n      { bind: [ req.body.email, security.hash(req.body.password) ], model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginJimChallenge_1_correct.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginAdminChallenge_2.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = $1 AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`,\n      { bind: [ req.body.email ], model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginAdminChallenge_2.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginBenderChallenge_2_correct.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = $mail AND password = $pass AND deletedAt IS NULL`,\n      { bind: { mail: req.body.email, pass: security.hash(req.body.password) }, model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginBenderChallenge_2_correct.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/tokenSaleChallenge_2.ts:19:\n `]` was unexpected",
      "path": "data/static/codefixes/tokenSaleChallenge_2.ts",
      "spans": [
        {
          "end": {
            "col": 2,
            "line": 19
          },
          "file": "data/static/codefixes/tokenSaleChallenge_2.ts",
          "start": {
            "col": 1,
            "line": 19
          }
        }
      ],
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line frontend/src/app/Services/user.service.ts:14:\n `new?:` was unexpected",
      "path": "frontend/src/app/Services/user.service.ts",
      "spans": [
        {
          "end": {
            "col": 8,
            "line": 14
          },
          "file": "frontend/src/app/Services/user.service.ts",
          "start": {
            "col": 3,
            "line": 14
          }
        }
      ],
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/tokenSaleChallenge_3_correct.ts:14:\n `]` was unexpected",
      "path": "data/static/codefixes/tokenSaleChallenge_3_correct.ts",
      "spans": [
        {
          "end": {
            "col": 2,
            "line": 14
          },
          "file": "data/static/codefixes/tokenSaleChallenge_3_correct.ts",
          "start": {
            "col": 1,
            "line": 14
          }
        }
      ],
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginAdminChallenge_4_correct.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = $1 AND password = $2 AND deletedAt IS NULL`,\n      { bind: [ req.body.email, security.hash(req.body.password) ], model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginAdminChallenge_4_correct.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginBenderChallenge_3.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = :mail AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`,\n      { replacements: { mail: req.body.email }, model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginBenderChallenge_3.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/restfulXssChallenge_3.ts:43:\n `: any[]` was unexpected",
      "path": "data/static/codefixes/restfulXssChallenge_3.ts",
      "spans": [
        {
          "end": {
            "col": 44,
            "line": 43
          },
          "file": "data/static/codefixes/restfulXssChallenge_3.ts",
          "start": {
            "col": 37,
            "line": 43
          }
        }
      ],
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginBenderChallenge_1.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (req.body.email.match(/.*['-;].*/) || req.body.password.match(/.*['-;].*/)) {\n      res.status(451).send(res.__('SQL Injection detected.'))\n    }\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginBenderChallenge_1.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginAdminChallenge_1.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (req.body.email.match(/.*['-;].*/) || req.body.password.match(/.*['-;].*/)) {\n      res.status(451).send(res.__('SQL Injection detected.'))\n    }\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginAdminChallenge_1.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/loginJimChallenge_4.ts:1:\n `import {BasketModel} from \"../../../models/basket\";\n\nmodule.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (req.body.email.match(/.*['-;].*/) || req.body.password.match(/.*['-;].*/)) {\n      res.status(451).send(res.__('SQL Injection detected.'))\n    }\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }` was unexpected",
      "path": "data/static/codefixes/loginJimChallenge_4.ts",
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/restfulXssChallenge_4.ts:57:\n `: any[]` was unexpected",
      "path": "data/static/codefixes/restfulXssChallenge_4.ts",
      "spans": [
        {
          "end": {
            "col": 44,
            "line": 57
          },
          "file": "data/static/codefixes/restfulXssChallenge_4.ts",
          "start": {
            "col": 37,
            "line": 57
          }
        }
      ],
      "type": "Syntax error"
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line data/static/codefixes/tokenSaleChallenge_1.ts:18:\n `]` was unexpected",
      "path": "data/static/codefixes/tokenSaleChallenge_1.ts",
      "spans": [
        {
          "end": {
            "col": 2,
            "line": 18
          },
          "file": "data/static/codefixes/tokenSaleChallenge_1.ts",
          "start": {
            "col": 1,
            "line": 18
          }
        }
      ],
      "type": "Syntax error"
    }
  ],
  "paths": {
    "_comment": "<add --verbose for a list of skipped paths>",
    "scanned": [
      ".eslintrc.js",
      "Gruntfile.js",
      "app.ts",
      "data/datacache.ts",
      "data/datacreator.ts",
      "data/mongodb.ts",
      "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "data/static/codefixes/adminSectionChallenge_1_correct.ts",
      "data/static/codefixes/adminSectionChallenge_2.ts",
      "data/static/codefixes/adminSectionChallenge_3.ts",
      "data/static/codefixes/adminSectionChallenge_4.ts",
      "data/static/codefixes/changeProductChallenge_1.ts",
      "data/static/codefixes/changeProductChallenge_2.ts",
      "data/static/codefixes/changeProductChallenge_3_correct.ts",
      "data/static/codefixes/changeProductChallenge_4.ts",
      "data/static/codefixes/dbSchemaChallenge_1.ts",
      "data/static/codefixes/dbSchemaChallenge_2_correct.ts",
      "data/static/codefixes/dbSchemaChallenge_3.ts",
      "data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "data/static/codefixes/directoryListingChallenge_2.ts",
      "data/static/codefixes/directoryListingChallenge_3.ts",
      "data/static/codefixes/directoryListingChallenge_4.ts",
      "data/static/codefixes/exposedMetricsChallenge_1.ts",
      "data/static/codefixes/exposedMetricsChallenge_2.ts",
      "data/static/codefixes/exposedMetricsChallenge_3_correct.ts",
      "data/static/codefixes/forgedReviewChallenge_1.ts",
      "data/static/codefixes/forgedReviewChallenge_2_correct.ts",
      "data/static/codefixes/forgedReviewChallenge_3.ts",
      "data/static/codefixes/localXssChallenge_1.ts",
      "data/static/codefixes/localXssChallenge_2_correct.ts",
      "data/static/codefixes/localXssChallenge_3.ts",
      "data/static/codefixes/localXssChallenge_4.ts",
      "data/static/codefixes/loginAdminChallenge_1.ts",
      "data/static/codefixes/loginAdminChallenge_2.ts",
      "data/static/codefixes/loginAdminChallenge_3.ts",
      "data/static/codefixes/loginAdminChallenge_4_correct.ts",
      "data/static/codefixes/loginBenderChallenge_1.ts",
      "data/static/codefixes/loginBenderChallenge_2_correct.ts",
      "data/static/codefixes/loginBenderChallenge_3.ts",
      "data/static/codefixes/loginBenderChallenge_4.ts",
      "data/static/codefixes/loginJimChallenge_1_correct.ts",
      "data/static/codefixes/loginJimChallenge_2.ts",
      "data/static/codefixes/loginJimChallenge_3.ts",
      "data/static/codefixes/loginJimChallenge_4.ts",
      "data/static/codefixes/noSqlReviewsChallenge_1.ts",
      "data/static/codefixes/noSqlReviewsChallenge_2.ts",
      "data/static/codefixes/noSqlReviewsChallenge_3_correct.ts",
      "data/static/codefixes/redirectChallenge_1.ts",
      "data/static/codefixes/redirectChallenge_2.ts",
      "data/static/codefixes/redirectChallenge_3.ts",
      "data/static/codefixes/redirectChallenge_4_correct.ts",
      "data/static/codefixes/redirectCryptoCurrencyChallenge_1.ts",
      "data/static/codefixes/redirectCryptoCurrencyChallenge_2.ts",
      "data/static/codefixes/redirectCryptoCurrencyChallenge_3_correct.ts",
      "data/static/codefixes/redirectCryptoCurrencyChallenge_4.ts",
      "data/static/codefixes/registerAdminChallenge_1.ts",
      "data/static/codefixes/registerAdminChallenge_2.ts",
      "data/static/codefixes/registerAdminChallenge_3_correct.ts",
      "data/static/codefixes/registerAdminChallenge_4.ts",
      "data/static/codefixes/resetPasswordMortyChallenge_1.ts",
      "data/static/codefixes/resetPasswordMortyChallenge_2.ts",
      "data/static/codefixes/resetPasswordMortyChallenge_3.ts",
      "data/static/codefixes/resetPasswordMortyChallenge_4_correct.ts",
      "data/static/codefixes/restfulXssChallenge_1_correct.ts",
      "data/static/codefixes/restfulXssChallenge_2.ts",
      "data/static/codefixes/restfulXssChallenge_3.ts",
      "data/static/codefixes/restfulXssChallenge_4.ts",
      "data/static/codefixes/scoreBoardChallenge_1_correct.ts",
      "data/static/codefixes/scoreBoardChallenge_2.ts",
      "data/static/codefixes/scoreBoardChallenge_3.ts",
      "data/static/codefixes/tokenSaleChallenge_1.ts",
      "data/static/codefixes/tokenSaleChallenge_2.ts",
      "data/static/codefixes/tokenSaleChallenge_3_correct.ts",
      "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
      "data/static/codefixes/unionSqlInjectionChallenge_2_correct.ts",
      "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
      "data/static/codefixes/xssBonusChallenge_1_correct.ts",
      "data/static/codefixes/xssBonusChallenge_2.ts",
      "data/static/codefixes/xssBonusChallenge_3.ts",
      "data/static/codefixes/xssBonusChallenge_4.ts",
      "data/types.ts",
      "frontend/.eslintrc.js",
      "frontend/.stylelintrc.js",
      "frontend/src/app/Models/backup.model.ts",
      "frontend/src/app/Models/challenge.model.ts",
      "frontend/src/app/Models/deliveryMethod.model.ts",
      "frontend/src/app/Models/product.model.ts",
      "frontend/src/app/Models/review.model.ts",
      "frontend/src/app/Models/securityQuestion.model.ts",
      "frontend/src/app/Services/address.service.spec.ts",
      "frontend/src/app/Services/address.service.ts",
      "frontend/src/app/Services/administration.service.spec.ts",
      "frontend/src/app/Services/administration.service.ts",
      "frontend/src/app/Services/basket.service.spec.ts",
      "frontend/src/app/Services/basket.service.ts",
      "frontend/src/app/Services/captcha.service.spec.ts",
      "frontend/src/app/Services/captcha.service.ts",
      "frontend/src/app/Services/challenge.service.spec.ts",
      "frontend/src/app/Services/challenge.service.ts",
      "frontend/src/app/Services/chatbot.service.spec.ts",
      "frontend/src/app/Services/chatbot.service.ts",
      "frontend/src/app/Services/code-fixes.service.spec.ts",
      "frontend/src/app/Services/code-fixes.service.ts",
      "frontend/src/app/Services/code-snippet.service.spec.ts",
      "frontend/src/app/Services/code-snippet.service.ts",
      "frontend/src/app/Services/complaint.service.spec.ts",
      "frontend/src/app/Services/complaint.service.ts",
      "frontend/src/app/Services/configuration.service.spec.ts",
      "frontend/src/app/Services/configuration.service.ts",
      "frontend/src/app/Services/country-mapping.service.spec.ts",
      "frontend/src/app/Services/country-mapping.service.ts",
      "frontend/src/app/Services/data-subject.service.spec.ts",
      "frontend/src/app/Services/data-subject.service.ts",
      "frontend/src/app/Services/delivery.service.spec.ts",
      "frontend/src/app/Services/delivery.service.ts",
      "frontend/src/app/Services/feedback.service.spec.ts",
      "frontend/src/app/Services/feedback.service.ts",
      "frontend/src/app/Services/form-submit.service.spec.ts",
      "frontend/src/app/Services/form-submit.service.ts",
      "frontend/src/app/Services/image-captcha.service.spec.ts",
      "frontend/src/app/Services/image-captcha.service.ts",
      "frontend/src/app/Services/languages.service.spec.ts",
      "frontend/src/app/Services/languages.service.ts",
      "frontend/src/app/Services/local-backup.service.spec.ts",
      "frontend/src/app/Services/local-backup.service.ts",
      "frontend/src/app/Services/order-history.service.spec.ts",
      "frontend/src/app/Services/order-history.service.ts",
      "frontend/src/app/Services/payment.service.spec.ts",
      "frontend/src/app/Services/payment.service.ts",
      "frontend/src/app/Services/photo-wall.service.spec.ts",
      "frontend/src/app/Services/photo-wall.service.ts",
      "frontend/src/app/Services/product-review.service.spec.ts",
      "frontend/src/app/Services/product-review.service.ts",
      "frontend/src/app/Services/product.service.spec.ts",
      "frontend/src/app/Services/product.service.ts",
      "frontend/src/app/Services/quantity.service.spec.ts",
      "frontend/src/app/Services/quantity.service.ts",
      "frontend/src/app/Services/recycle.service.spec.ts",
      "frontend/src/app/Services/recycle.service.ts",
      "frontend/src/app/Services/request.interceptor.ts",
      "frontend/src/app/Services/security-answer.service.spec.ts",
      "frontend/src/app/Services/security-answer.service.ts",
      "frontend/src/app/Services/security-question.service.spec.ts",
      "frontend/src/app/Services/security-question.service.ts",
      "frontend/src/app/Services/snack-bar-helper.service.spec.ts",
      "frontend/src/app/Services/snack-bar-helper.service.ts",
      "frontend/src/app/Services/socket-io.service.spec.ts",
      "frontend/src/app/Services/socket-io.service.ts",
      "frontend/src/app/Services/track-order.service.spec.ts",
      "frontend/src/app/Services/track-order.service.ts",
      "frontend/src/app/Services/two-factor-auth-service.spec.ts",
      "frontend/src/app/Services/two-factor-auth-service.ts",
      "frontend/src/app/Services/user.service.spec.ts",
      "frontend/src/app/Services/user.service.ts",
      "frontend/src/app/Services/vuln-lines.service.spec.ts",
      "frontend/src/app/Services/vuln-lines.service.ts",
      "frontend/src/app/Services/wallet.service.spec.ts",
      "frontend/src/app/Services/wallet.service.ts",
      "frontend/src/app/Services/window-ref.service.spec.ts",
      "frontend/src/app/Services/window-ref.service.ts",
      "frontend/src/app/about/about.component.spec.ts",
      "frontend/src/app/about/about.component.ts",
      "frontend/src/app/accounting/accounting.component.spec.ts",
      "frontend/src/app/accounting/accounting.component.ts",
      "frontend/src/app/address/address.component.spec.ts",
      "frontend/src/app/address/address.component.ts",
      "frontend/src/app/address-create/address-create.component.spec.ts",
      "frontend/src/app/address-create/address-create.component.ts",
      "frontend/src/app/address-select/address-select.component.spec.ts",
      "frontend/src/app/address-select/address-select.component.ts",
      "frontend/src/app/administration/administration.component.spec.ts",
      "frontend/src/app/administration/administration.component.ts",
      "frontend/src/app/app.component.spec.ts",
      "frontend/src/app/app.component.ts",
      "frontend/src/app/app.guard.spec.ts",
      "frontend/src/app/app.guard.ts",
      "frontend/src/app/app.module.ts",
      "frontend/src/app/app.routing.ts",
      "frontend/src/app/basket/basket.component.spec.ts",
      "frontend/src/app/basket/basket.component.ts",
      "frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.spec.ts",
      "frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.ts",
      "frontend/src/app/challenge-status-badge/challenge-status-badge.component.spec.ts",
      "frontend/src/app/challenge-status-badge/challenge-status-badge.component.ts",
      "frontend/src/app/change-password/change-password.component.spec.ts",
      "frontend/src/app/change-password/change-password.component.ts",
      "frontend/src/app/chatbot/chatbot.component.spec.ts",
      "frontend/src/app/chatbot/chatbot.component.ts",
      "frontend/src/app/code-area/code-area.component.spec.ts",
      "frontend/src/app/code-area/code-area.component.ts",
      "frontend/src/app/code-fixes/code-fixes.component.spec.ts",
      "frontend/src/app/code-fixes/code-fixes.component.ts",
      "frontend/src/app/code-snippet/code-snippet.component.spec.ts",
      "frontend/src/app/code-snippet/code-snippet.component.ts",
      "frontend/src/app/complaint/complaint.component.spec.ts",
      "frontend/src/app/complaint/complaint.component.ts",
      "frontend/src/app/contact/contact.component.spec.ts",
      "frontend/src/app/contact/contact.component.ts",
      "frontend/src/app/data-export/data-export.component.spec.ts",
      "frontend/src/app/data-export/data-export.component.ts",
      "frontend/src/app/delivery-method/delivery-method.component.spec.ts",
      "frontend/src/app/delivery-method/delivery-method.component.ts",
      "frontend/src/app/deluxe-user/deluxe-user.component.spec.ts",
      "frontend/src/app/deluxe-user/deluxe-user.component.ts",
      "frontend/src/app/error-page/error-page.component.spec.ts",
      "frontend/src/app/error-page/error-page.component.ts",
      "frontend/src/app/feedback-details/feedback-details.component.spec.ts",
      "frontend/src/app/feedback-details/feedback-details.component.ts",
      "frontend/src/app/forgot-password/forgot-password.component.spec.ts",
      "frontend/src/app/forgot-password/forgot-password.component.ts",
      "frontend/src/app/last-login-ip/last-login-ip.component.spec.ts",
      "frontend/src/app/last-login-ip/last-login-ip.component.ts",
      "frontend/src/app/login/login.component.spec.ts",
      "frontend/src/app/login/login.component.ts",
      "frontend/src/app/navbar/navbar.component.spec.ts",
      "frontend/src/app/navbar/navbar.component.ts",
      "frontend/src/app/oauth/oauth.component.spec.ts",
      "frontend/src/app/oauth/oauth.component.ts",
      "frontend/src/app/order-completion/order-completion.component.spec.ts",
      "frontend/src/app/order-completion/order-completion.component.ts",
      "frontend/src/app/order-history/order-history.component.spec.ts",
      "frontend/src/app/order-history/order-history.component.ts",
      "frontend/src/app/order-summary/order-summary.component.spec.ts",
      "frontend/src/app/order-summary/order-summary.component.ts",
      "frontend/src/app/payment/payment.component.spec.ts",
      "frontend/src/app/payment/payment.component.ts",
      "frontend/src/app/payment-method/payment-method.component.spec.ts",
      "frontend/src/app/payment-method/payment-method.component.ts",
      "frontend/src/app/photo-wall/mime-type.validator.ts",
      "frontend/src/app/photo-wall/photo-wall.component.spec.ts",
      "frontend/src/app/photo-wall/photo-wall.component.ts",
      "frontend/src/app/privacy-policy/privacy-policy.component.spec.ts",
      "frontend/src/app/privacy-policy/privacy-policy.component.ts",
      "frontend/src/app/privacy-security/privacy-security.component.spec.ts",
      "frontend/src/app/privacy-security/privacy-security.component.ts",
      "frontend/src/app/product-details/product-details.component.spec.ts",
      "frontend/src/app/product-details/product-details.component.ts",
      "frontend/src/app/product-review-edit/product-review-edit.component.spec.ts",
      "frontend/src/app/product-review-edit/product-review-edit.component.ts",
      "frontend/src/app/purchase-basket/purchase-basket.component.spec.ts",
      "frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "frontend/src/app/qr-code/qr-code.component.spec.ts",
      "frontend/src/app/qr-code/qr-code.component.ts",
      "frontend/src/app/recycle/recycle.component.spec.ts",
      "frontend/src/app/recycle/recycle.component.ts",
      "frontend/src/app/register/register.component.spec.ts",
      "frontend/src/app/register/register.component.ts",
      "frontend/src/app/roles.ts",
      "frontend/src/app/saved-address/saved-address.component.spec.ts",
      "frontend/src/app/saved-address/saved-address.component.ts",
      "frontend/src/app/saved-payment-methods/saved-payment-methods.component.spec.ts",
      "frontend/src/app/saved-payment-methods/saved-payment-methods.component.ts",
      "frontend/src/app/score-board/score-board.component.spec.ts",
      "frontend/src/app/score-board/score-board.component.ts",
      "frontend/src/app/search-result/search-result.component.spec.ts",
      "frontend/src/app/search-result/search-result.component.ts",
      "frontend/src/app/server-started-notification/server-started-notification.component.spec.ts",
      "frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "frontend/src/app/sidenav/sidenav.component.spec.ts",
      "frontend/src/app/sidenav/sidenav.component.ts",
      "frontend/src/app/token-sale/token-sale.component.spec.ts",
      "frontend/src/app/token-sale/token-sale.component.ts",
      "frontend/src/app/track-result/track-result.component.spec.ts",
      "frontend/src/app/track-result/track-result.component.ts",
      "frontend/src/app/two-factor-auth/two-factor-auth.component.spec.ts",
      "frontend/src/app/two-factor-auth/two-factor-auth.component.ts",
      "frontend/src/app/two-factor-auth-enter/two-factor-auth-enter.component.spec.ts",
      "frontend/src/app/two-factor-auth-enter/two-factor-auth-enter.component.ts",
      "frontend/src/app/user-details/user-details.component.spec.ts",
      "frontend/src/app/user-details/user-details.component.ts",
      "frontend/src/app/wallet/wallet.component.spec.ts",
      "frontend/src/app/wallet/wallet.component.ts",
      "frontend/src/app/welcome/welcome.component.spec.ts",
      "frontend/src/app/welcome/welcome.component.ts",
      "frontend/src/app/welcome-banner/welcome-banner.component.spec.ts",
      "frontend/src/app/welcome-banner/welcome-banner.component.ts",
      "frontend/src/assets/private/CopyShader.js",
      "frontend/src/assets/private/EffectComposer.js",
      "frontend/src/assets/private/MaskPass.js",
      "frontend/src/assets/private/OrbitControls.js",
      "frontend/src/assets/private/RenderPass.js",
      "frontend/src/assets/private/ShaderPass.js",
      "frontend/src/assets/private/three.js",
      "frontend/src/confetti/index.ts",
      "frontend/src/environments/environment.prod.ts",
      "frontend/src/environments/environment.ts",
      "frontend/src/hacking-instructor/challenges/bonusPayload.ts",
      "frontend/src/hacking-instructor/challenges/codingChallenges.ts",
      "frontend/src/hacking-instructor/challenges/domXss.ts",
      "frontend/src/hacking-instructor/challenges/forgedFeedback.ts",
      "frontend/src/hacking-instructor/challenges/loginAdmin.ts",
      "frontend/src/hacking-instructor/challenges/loginBender.ts",
      "frontend/src/hacking-instructor/challenges/loginJim.ts",
      "frontend/src/hacking-instructor/challenges/passwordStrength.ts",
      "frontend/src/hacking-instructor/challenges/privacyPolicy.ts",
      "frontend/src/hacking-instructor/challenges/scoreBoard.ts",
      "frontend/src/hacking-instructor/challenges/viewBasket.ts",
      "frontend/src/hacking-instructor/helpers/helpers.ts",
      "frontend/src/hacking-instructor/index.ts",
      "frontend/src/hacking-instructor/tutorialUnavailable.ts",
      "frontend/src/karma.conf.js",
      "frontend/src/main.ts",
      "frontend/src/polyfills.ts",
      "frontend/src/test.ts",
      "lib/accuracy.ts",
      "lib/antiCheat.ts",
      "lib/botUtils.ts",
      "lib/challengeUtils.ts",
      "lib/insecurity.ts",
      "lib/logger.ts",
      "lib/noUpdate.ts",
      "lib/startup/cleanupFtpFolder.ts",
      "lib/startup/customizeApplication.ts",
      "lib/startup/customizeEasterEgg.ts",
      "lib/startup/registerWebsocketEvents.ts",
      "lib/startup/restoreOverwrittenFilesWithOriginals.ts",
      "lib/startup/validateChatBot.ts",
      "lib/startup/validateConfig.ts",
      "lib/startup/validateDependencies.ts",
      "lib/startup/validatePreconditions.ts",
      "lib/utils.ts",
      "lib/webhook.ts",
      "models/address.ts",
      "models/basket.ts",
      "models/basketitem.ts",
      "models/captcha.ts",
      "models/card.ts",
      "models/challenge.ts",
      "models/complaint.ts",
      "models/delivery.ts",
      "models/feedback.ts",
      "models/imageCaptcha.ts",
      "models/index.ts",
      "models/memory.ts",
      "models/privacyRequests.ts",
      "models/product.ts",
      "models/quantity.ts",
      "models/recycle.ts",
      "models/relations.ts",
      "models/securityAnswer.ts",
      "models/securityQuestion.ts",
      "models/user.ts",
      "models/wallet.ts",
      "routes/2fa.ts",
      "routes/address.ts",
      "routes/angular.ts",
      "routes/appConfiguration.ts",
      "routes/appVersion.ts",
      "routes/authenticatedUsers.ts",
      "routes/b2bOrder.ts",
      "routes/basket.ts",
      "routes/basketItems.ts",
      "routes/captcha.ts",
      "routes/changePassword.ts",
      "routes/chatbot.ts",
      "routes/continueCode.ts",
      "routes/countryMapping.ts",
      "routes/coupon.ts",
      "routes/createProductReviews.ts",
      "routes/currentUser.ts",
      "routes/dataErasure.ts",
      "routes/dataExport.ts",
      "routes/delivery.ts",
      "routes/deluxe.ts",
      "routes/easterEgg.ts",
      "routes/fileServer.ts",
      "routes/fileUpload.ts",
      "routes/imageCaptcha.ts",
      "routes/keyServer.ts",
      "routes/languages.ts",
      "routes/likeProductReviews.ts",
      "routes/logfileServer.ts",
      "routes/login.ts",
      "routes/memory.ts",
      "routes/metrics.ts",
      "routes/order.ts",
      "routes/orderHistory.ts",
      "routes/payment.ts",
      "routes/premiumReward.ts",
      "routes/privacyPolicyProof.ts",
      "routes/profileImageFileUpload.ts",
      "routes/profileImageUrlUpload.ts",
      "routes/quarantineServer.ts",
      "routes/recycles.ts",
      "routes/redirect.ts",
      "routes/repeatNotification.ts",
      "routes/resetPassword.ts",
      "routes/restoreProgress.ts",
      "routes/saveLoginIp.ts",
      "routes/search.ts",
      "routes/securityQuestion.ts",
      "routes/showProductReviews.ts",
      "routes/trackOrder.ts",
      "routes/updateProductReviews.ts",
      "routes/updateUserProfile.ts",
      "routes/userProfile.ts",
      "routes/verify.ts",
      "routes/videoHandler.ts",
      "routes/vulnCodeFixes.ts",
      "routes/vulnCodeSnippet.ts",
      "routes/wallet.ts",
      "rsn/rsn-update.ts",
      "rsn/rsn-verbose.ts",
      "rsn/rsn.ts",
      "rsn/rsnUtil.ts",
      "server.ts",
      "views/themes/themes.js"
    ]
  },
  "results": [
    {
      "check_id": "javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
      "end": {
        "col": 61,
        "line": 55,
        "offset": 2654
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 61,
                  "line": 55,
                  "offset": 2654
                },
                "path": "lib/insecurity.ts",
                "start": {
                  "col": 51,
                  "line": 55,
                  "offset": 2644
                }
              },
              "privateKey"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 112,
                  "line": 55,
                  "offset": 2705
                },
                "path": "lib/insecurity.ts",
                "start": {
                  "col": 36,
                  "line": 55,
                  "offset": 2629
                }
              },
              "jwt.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: 'RS256' })"
            ]
          ]
        },
        "fingerprint": "9b7419ae47ca779fc84b65be7e864723a6ca5bf08e26b8d7df9ffa2b51dad3443f26b03d61b4dcb5328ce1afa5f5e79a303d3b27045439f734aff0b61cc9b1db_0",
        "is_ignored": false,
        "lines": "exports.authorize = (user = {}) => jwt.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: 'RS256' })",
        "message": "A hard-coded credential was detected. It is not recommended  to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary.  It is recommended to use environment variables to  securely provide credentials or retrieve credentials from  a secure vault or HSM (Hardware Security Module).",
        "metadata": {
          "asvs": {
            "control_id": "3.5.2 Static API keys or secret",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
            "section": "V3: Session Management Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-798: Use of Hard-coded Credentials"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A07:2021 - Identification and Authentication Failures"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"
          ],
          "shortlink": "https://sg.run/4xN9",
          "source": "https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "jwt",
            "javascript",
            "secrets"
          ]
        },
        "metavars": {
          "$DATA": {
            "abstract_content": "user",
            "end": {
              "col": 49,
              "line": 55,
              "offset": 2642
            },
            "start": {
              "col": 45,
              "line": 55,
              "offset": 2638
            }
          },
          "$JWT": {
            "abstract_content": "'jsonwebtoken'",
            "end": {
              "col": 35,
              "line": 12,
              "offset": 353
            },
            "start": {
              "col": 21,
              "line": 12,
              "offset": 339
            }
          },
          "$VALUE": {
            "abstract_content": "user",
            "end": {
              "col": 49,
              "line": 55,
              "offset": 2642
            },
            "start": {
              "col": 45,
              "line": 55,
              "offset": 2638
            }
          },
          "$Y": {
            "abstract_content": "-----BEGIN RSA PRIVATE KEY-----\\r\\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX43zO6Ko0TFEZx/65gY3BE0O6syCEmUP4qbSd6exou/F+WTISzbQ5FBVPVmhnYhG/kpwt/cIxK5iUn5hm+4tQIDAQABAoGBAI+8xiPoOrA+KMnG/T4jJsG6TsHQcDHvJi7o1IKC/hnIXha0atTX5AUkRRce95qSfvKFweXdJXSQ0JMGJyfuXgU6dI0TcseFRfewXAa/ssxAC+iUVR6KUMh1PE2wXLitfeI6JLvVtrBYswm2I7CtY0q8n5AGimHWVXJPLfGV7m0BAkEA+fqFt2LXbLtyg6wZyxMA/cnmt5Nt3U2dAu77MzFJvibANUNHE4HPLZxjGNXN+a6m0K6TD4kDdh5HfUYLWWRBYQJBANK3carmulBwqzcDBjsJ0YrIONBpCAsXxk8idXb8jL9aNIg15Wumm2enqqObahDHB5jnGOLmbasizvSVqypfM9UCQCQl8xIqy+YgURXzXCN+kwUgHinrutZms87Jyi+D8Br8NY0+Nlf+zHvXAomD2W5CsEK7C+8SLBr3k/TsnRWHJuECQHFE9RA2OP8WoaLPuGCyFXaxzICThSRZYluVnWkZtxsBhW2W8z1b8PvWUE7kMy7TnkzeJS2LSnaNHoyxi7IaPQUCQCwWU4U+v4lD7uYBw00Ga/xt+7+UqFPlPVdz1yyr4q24Zxaw0LgmuEvgU5dycq8N7JxjTubX0MIRR+G9fmDBBl8=\\r\\n-----END RSA PRIVATE KEY-----",
            "end": {
              "col": 901,
              "line": 22,
              "offset": 1573
            },
            "start": {
              "col": 21,
              "line": 22,
              "offset": 693
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "lib/insecurity.ts",
      "start": {
        "col": 51,
        "line": 55,
        "offset": 2644
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-ssrf.express-ssrf",
      "end": {
        "col": 19,
        "line": 23,
        "offset": 874
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "url",
              "location": {
                "end": {
                  "col": 16,
                  "line": 18,
                  "offset": 584
                },
                "path": "routes/profileImageUrlUpload.ts",
                "start": {
                  "col": 13,
                  "line": 18,
                  "offset": 581
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 19,
                  "line": 23,
                  "offset": 874
                },
                "path": "routes/profileImageUrlUpload.ts",
                "start": {
                  "col": 16,
                  "line": 23,
                  "offset": 871
                }
              },
              "url"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 27,
                  "line": 18,
                  "offset": 595
                },
                "path": "routes/profileImageUrlUpload.ts",
                "start": {
                  "col": 19,
                  "line": 18,
                  "offset": 587
                }
              },
              "req.body"
            ]
          ]
        },
        "fingerprint": "4b5adbd2d0265d5fcd125900a17bbe288e48ed850b762240206ae2c961d3031e10bf698ce383a3e2bb9658596f1ba6ca8aa8535a12690cb441979b15133471c3_0",
        "is_ignored": false,
        "lines": "          .get(url)",
        "message": "The following request request.get(url) was found to be crafted from user-input which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-918: Server-Side Request Forgery (SSRF)"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "owasp": [
            "A10:2021 - Server-Side Request Forgery (SSRF)"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/0PNw",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-ssrf.express-ssrf",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$METHOD1": {
            "abstract_content": "get",
            "end": {
              "col": 15,
              "line": 23,
              "offset": 870
            },
            "start": {
              "col": 12,
              "line": 23,
              "offset": 867
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 16,
              "offset": 505
            },
            "start": {
              "col": 40,
              "line": 16,
              "offset": 501
            }
          },
          "$QUERY": {
            "abstract_content": "url",
            "end": {
              "col": 19,
              "line": 23,
              "offset": 874
            },
            "propagated_value": {
              "svalue_abstract_content": "req.body.imageUrl",
              "svalue_end": {
                "col": 36,
                "line": 18,
                "offset": 604
              },
              "svalue_start": {
                "col": 19,
                "line": 18,
                "offset": 587
              }
            },
            "start": {
              "col": 16,
              "line": 23,
              "offset": 871
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 22,
              "line": 18,
              "offset": 590
            },
            "start": {
              "col": 19,
              "line": 18,
              "offset": 587
            }
          },
          "$REQ1": {
            "abstract_content": "request",
            "end": {
              "col": 37,
              "line": 22,
              "offset": 855
            },
            "start": {
              "col": 30,
              "line": 22,
              "offset": 848
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 16,
              "offset": 489
            },
            "start": {
              "col": 25,
              "line": 16,
              "offset": 486
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/profileImageUrlUpload.ts",
      "start": {
        "col": 16,
        "line": 23,
        "offset": 871
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
      "end": {
        "col": 60,
        "line": 69,
        "offset": 2284
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 60,
                  "line": 69,
                  "offset": 2284
                },
                "path": "routes/dataErasure.ts",
                "start": {
                  "col": 45,
                  "line": 69,
                  "offset": 2269
                }
              },
              "req.body.layout"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 53,
                  "line": 69,
                  "offset": 2277
                },
                "path": "routes/dataErasure.ts",
                "start": {
                  "col": 45,
                  "line": 69,
                  "offset": 2269
                }
              },
              "req.body"
            ]
          ]
        },
        "fingerprint": "d9646d5b70dc0f1cfaf65c4f780b4838b32f18a2551abec56de0f7eb5a2db13c4ecd0700d7bb9ed42edae19e1b1dfbac66be3feb6ce9d4f82157afc53f03c188_0",
        "is_ignored": false,
        "lines": "      const filePath: string = path.resolve(req.body.layout).toLowerCase()",
        "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "shortlink": "https://sg.run/weRn",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express",
            "node.js"
          ]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "router",
            "end": {
              "col": 7,
              "line": 54,
              "offset": 1719
            },
            "propagated_value": {
              "svalue_abstract_content": "express.Router()",
              "svalue_end": {
                "col": 32,
                "line": 15,
                "offset": 643
              },
              "svalue_start": {
                "col": 16,
                "line": 15,
                "offset": 627
              }
            },
            "start": {
              "col": 1,
              "line": 54,
              "offset": 1713
            }
          },
          "$METHOD": {
            "abstract_content": "post",
            "end": {
              "col": 12,
              "line": 54,
              "offset": 1724
            },
            "start": {
              "col": 8,
              "line": 54,
              "offset": 1720
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 92,
              "line": 54,
              "offset": 1804
            },
            "start": {
              "col": 88,
              "line": 54,
              "offset": 1800
            }
          },
          "$PATH": {
            "abstract_content": "path",
            "end": {
              "col": 36,
              "line": 69,
              "offset": 2260
            },
            "start": {
              "col": 32,
              "line": 69,
              "offset": 2256
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 48,
              "line": 69,
              "offset": 2272
            },
            "start": {
              "col": 45,
              "line": 69,
              "offset": 2269
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 76,
              "line": 54,
              "offset": 1788
            },
            "start": {
              "col": 73,
              "line": 54,
              "offset": 1785
            }
          },
          "$SINK": {
            "abstract_content": "req.body.layout",
            "end": {
              "col": 60,
              "line": 69,
              "offset": 2284
            },
            "start": {
              "col": 45,
              "line": 69,
              "offset": 2269
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/dataErasure.ts",
      "start": {
        "col": 45,
        "line": 69,
        "offset": 2269
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
      "end": {
        "col": 56,
        "line": 14,
        "offset": 442
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "params",
              "location": {
                "end": {
                  "col": 19,
                  "line": 10,
                  "offset": 273
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 13,
                  "line": 10,
                  "offset": 267
                }
              }
            },
            {
              "content": "file",
              "location": {
                "end": {
                  "col": 15,
                  "line": 11,
                  "offset": 340
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 11,
                  "line": 11,
                  "offset": 336
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 56,
                  "line": 14,
                  "offset": 442
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 52,
                  "line": 14,
                  "offset": 438
                }
              },
              "file"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 19,
                  "line": 10,
                  "offset": 273
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 13,
                  "line": 10,
                  "offset": 267
                }
              },
              "params"
            ]
          ]
        },
        "fingerprint": "61ff0ef3a6438f8e69ef8457e3f95f844787ad58ef6a9b2a93dc684a1504d223617e6708689b4ece9b8a784fdacc6357e52220b0226dae233c0aadd44003b493_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('encryptionkeys/', file))",
        "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "shortlink": "https://sg.run/weRn",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express",
            "node.js"
          ]
        },
        "metavars": {
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 51,
              "line": 10,
              "offset": 305
            },
            "start": {
              "col": 47,
              "line": 10,
              "offset": 301
            }
          },
          "$REQ": {
            "abstract_content": "params",
            "end": {
              "col": 19,
              "line": 10,
              "offset": 273
            },
            "start": {
              "col": 13,
              "line": 10,
              "offset": 267
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 35,
              "line": 10,
              "offset": 289
            },
            "start": {
              "col": 32,
              "line": 10,
              "offset": 286
            }
          },
          "$SINK": {
            "abstract_content": "file",
            "end": {
              "col": 56,
              "line": 14,
              "offset": 442
            },
            "propagated_value": {
              "svalue_abstract_content": "params.file",
              "svalue_end": {
                "col": 29,
                "line": 11,
                "offset": 354
              },
              "svalue_start": {
                "col": 18,
                "line": 11,
                "offset": 343
              }
            },
            "start": {
              "col": 52,
              "line": 14,
              "offset": 438
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/keyServer.ts",
      "start": {
        "col": 52,
        "line": 14,
        "offset": 438
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
      "end": {
        "col": 46,
        "line": 14,
        "offset": 432
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "params",
              "location": {
                "end": {
                  "col": 19,
                  "line": 10,
                  "offset": 273
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 13,
                  "line": 10,
                  "offset": 267
                }
              }
            },
            {
              "content": "file",
              "location": {
                "end": {
                  "col": 15,
                  "line": 11,
                  "offset": 340
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 11,
                  "line": 11,
                  "offset": 336
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 46,
                  "line": 14,
                  "offset": 432
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 42,
                  "line": 14,
                  "offset": 428
                }
              },
              "file"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 19,
                  "line": 10,
                  "offset": 273
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 13,
                  "line": 10,
                  "offset": 267
                }
              },
              "params"
            ]
          ]
        },
        "fingerprint": "b006dd478b7c4c3e581ffefa653e2acc49ff508e726936cf55711b71057a86100d2a66b55e0d7b9b04e48aad88892b8b168b8825d679db573dd93efd650d76d8_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('logs/', file))",
        "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "shortlink": "https://sg.run/weRn",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express",
            "node.js"
          ]
        },
        "metavars": {
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 51,
              "line": 10,
              "offset": 305
            },
            "start": {
              "col": 47,
              "line": 10,
              "offset": 301
            }
          },
          "$REQ": {
            "abstract_content": "params",
            "end": {
              "col": 19,
              "line": 10,
              "offset": 273
            },
            "start": {
              "col": 13,
              "line": 10,
              "offset": 267
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 35,
              "line": 10,
              "offset": 289
            },
            "start": {
              "col": 32,
              "line": 10,
              "offset": 286
            }
          },
          "$SINK": {
            "abstract_content": "file",
            "end": {
              "col": 46,
              "line": 14,
              "offset": 432
            },
            "propagated_value": {
              "svalue_abstract_content": "params.file",
              "svalue_end": {
                "col": 29,
                "line": 11,
                "offset": 354
              },
              "svalue_start": {
                "col": 18,
                "line": 11,
                "offset": 343
              }
            },
            "start": {
              "col": 42,
              "line": 14,
              "offset": 428
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/logfileServer.ts",
      "start": {
        "col": 42,
        "line": 14,
        "offset": 428
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
      "end": {
        "col": 56,
        "line": 14,
        "offset": 456
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "params",
              "location": {
                "end": {
                  "col": 19,
                  "line": 10,
                  "offset": 280
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 13,
                  "line": 10,
                  "offset": 274
                }
              }
            },
            {
              "content": "file",
              "location": {
                "end": {
                  "col": 15,
                  "line": 11,
                  "offset": 354
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 11,
                  "line": 11,
                  "offset": 350
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 56,
                  "line": 14,
                  "offset": 456
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 52,
                  "line": 14,
                  "offset": 452
                }
              },
              "file"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 19,
                  "line": 10,
                  "offset": 280
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 13,
                  "line": 10,
                  "offset": 274
                }
              },
              "params"
            ]
          ]
        },
        "fingerprint": "c56fde85159a4267f7b3cb6642b732d750f67ba5e8a4550aa0e9213b802ebf3c27ebd8e6a3183d267eadc3d12749de80ac659ac2d28eabc6b17f92d20307241f_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('ftp/quarantine/', file))",
        "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "shortlink": "https://sg.run/weRn",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express",
            "node.js"
          ]
        },
        "metavars": {
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 58,
              "line": 10,
              "offset": 319
            },
            "start": {
              "col": 54,
              "line": 10,
              "offset": 315
            }
          },
          "$REQ": {
            "abstract_content": "params",
            "end": {
              "col": 19,
              "line": 10,
              "offset": 280
            },
            "start": {
              "col": 13,
              "line": 10,
              "offset": 274
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 42,
              "line": 10,
              "offset": 303
            },
            "start": {
              "col": 39,
              "line": 10,
              "offset": 300
            }
          },
          "$SINK": {
            "abstract_content": "file",
            "end": {
              "col": 56,
              "line": 14,
              "offset": 456
            },
            "propagated_value": {
              "svalue_abstract_content": "params.file",
              "svalue_end": {
                "col": 29,
                "line": 11,
                "offset": 368
              },
              "svalue_start": {
                "col": 18,
                "line": 11,
                "offset": 357
              }
            },
            "start": {
              "col": 52,
              "line": 14,
              "offset": 452
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/quarantineServer.ts",
      "start": {
        "col": 52,
        "line": 14,
        "offset": 452
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
      "end": {
        "col": 46,
        "line": 33,
        "offset": 1177
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 46,
                  "line": 33,
                  "offset": 1177
                },
                "path": "routes/fileServer.ts",
                "start": {
                  "col": 20,
                  "line": 33,
                  "offset": 1151
                }
              },
              "path.resolve('ftp/', file)"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 4,
                  "line": 38,
                  "offset": 1285
                },
                "path": "routes/fileServer.ts",
                "start": {
                  "col": 3,
                  "line": 26,
                  "offset": 744
                }
              },
              "function verify (file: string, res: Response, next: NextFunction) {\n    if (file && (endsWithAllowlistedFileType(file) || (file === 'incident-support.kdbx'))) {\n      file = security.cutOffPoisonNullByte(file)\n\n      challengeUtils.solveIf(challenges.directoryListingChallenge, () => { return file.toLowerCase() === 'acquisitions.md' })\n      verifySuccessfulPoisonNullByteExploit(file)\n\n      res.sendFile(path.resolve('ftp/', file))\n    } else {\n      res.status(403)\n      next(new Error('Only .md and .pdf files are allowed!'))\n    }\n  }"
            ]
          ]
        },
        "fingerprint": "33b7141eed49238da420ec9577803fb8853ce0c26f5dbccf88323265a789cf24f5c8147d6baf6b15c489dd2b1b36fefae7843207e9f3f8e0af88de44306e520a_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('ftp/', file))",
        "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-73: External Control of File Name or Path"
          ],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/7DJk",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$METH": {
            "abstract_content": "sendFile",
            "end": {
              "col": 19,
              "line": 33,
              "offset": 1150
            },
            "start": {
              "col": 11,
              "line": 33,
              "offset": 1142
            }
          },
          "$QUERY": {
            "abstract_content": "path.resolve('ftp/'file)",
            "end": {
              "col": 46,
              "line": 33,
              "offset": 1177
            },
            "start": {
              "col": 20,
              "line": 33,
              "offset": 1151
            }
          },
          "$REQ": {
            "abstract_content": "file",
            "end": {
              "col": 24,
              "line": 26,
              "offset": 765
            },
            "start": {
              "col": 20,
              "line": 26,
              "offset": 761
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 10,
              "line": 33,
              "offset": 1141
            },
            "start": {
              "col": 7,
              "line": 33,
              "offset": 1138
            }
          },
          "$TYPE": {
            "abstract_content": "string",
            "end": {
              "col": 32,
              "line": 26,
              "offset": 773
            },
            "start": {
              "col": 26,
              "line": 26,
              "offset": 767
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/fileServer.ts",
      "start": {
        "col": 20,
        "line": 33,
        "offset": 1151
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
      "end": {
        "col": 57,
        "line": 14,
        "offset": 443
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "file",
              "location": {
                "end": {
                  "col": 15,
                  "line": 11,
                  "offset": 340
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 11,
                  "line": 11,
                  "offset": 336
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 57,
                  "line": 14,
                  "offset": 443
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 20,
                  "line": 14,
                  "offset": 406
                }
              },
              "path.resolve('encryptionkeys/', file)"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 24,
                  "line": 11,
                  "offset": 349
                },
                "path": "routes/keyServer.ts",
                "start": {
                  "col": 18,
                  "line": 11,
                  "offset": 343
                }
              },
              "params"
            ]
          ]
        },
        "fingerprint": "169fd21661d97adbf183e909974bcc252fa19a91d68176a8e888d61c2e5283b516ae384c4576ecb09d96af8f1fcb4c5f99af3db7af83ec34f5fc9f11ecd9c927_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('encryptionkeys/', file))",
        "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-73: External Control of File Name or Path"
          ],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/7DJk",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$METH": {
            "abstract_content": "sendFile",
            "end": {
              "col": 19,
              "line": 14,
              "offset": 405
            },
            "start": {
              "col": 11,
              "line": 14,
              "offset": 397
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 51,
              "line": 10,
              "offset": 305
            },
            "start": {
              "col": 47,
              "line": 10,
              "offset": 301
            }
          },
          "$QUERY": {
            "abstract_content": "path.resolve('encryptionkeys/'file)",
            "end": {
              "col": 57,
              "line": 14,
              "offset": 443
            },
            "start": {
              "col": 20,
              "line": 14,
              "offset": 406
            }
          },
          "$REQ": {
            "abstract_content": "params",
            "end": {
              "col": 19,
              "line": 10,
              "offset": 273
            },
            "start": {
              "col": 13,
              "line": 10,
              "offset": 267
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 35,
              "line": 10,
              "offset": 289
            },
            "start": {
              "col": 32,
              "line": 10,
              "offset": 286
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/keyServer.ts",
      "start": {
        "col": 20,
        "line": 14,
        "offset": 406
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
      "end": {
        "col": 47,
        "line": 14,
        "offset": 433
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "file",
              "location": {
                "end": {
                  "col": 15,
                  "line": 11,
                  "offset": 340
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 11,
                  "line": 11,
                  "offset": 336
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 47,
                  "line": 14,
                  "offset": 433
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 20,
                  "line": 14,
                  "offset": 406
                }
              },
              "path.resolve('logs/', file)"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 24,
                  "line": 11,
                  "offset": 349
                },
                "path": "routes/logfileServer.ts",
                "start": {
                  "col": 18,
                  "line": 11,
                  "offset": 343
                }
              },
              "params"
            ]
          ]
        },
        "fingerprint": "961a9260d800a2bb91582c6046728dc167574254fcc85628c7c79a7fd47557c3587663de55a9715bcf22c43160119c80d17b890e7a12090b6b091eb77fd2750e_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('logs/', file))",
        "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-73: External Control of File Name or Path"
          ],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/7DJk",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$METH": {
            "abstract_content": "sendFile",
            "end": {
              "col": 19,
              "line": 14,
              "offset": 405
            },
            "start": {
              "col": 11,
              "line": 14,
              "offset": 397
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 51,
              "line": 10,
              "offset": 305
            },
            "start": {
              "col": 47,
              "line": 10,
              "offset": 301
            }
          },
          "$QUERY": {
            "abstract_content": "path.resolve('logs/'file)",
            "end": {
              "col": 47,
              "line": 14,
              "offset": 433
            },
            "start": {
              "col": 20,
              "line": 14,
              "offset": 406
            }
          },
          "$REQ": {
            "abstract_content": "params",
            "end": {
              "col": 19,
              "line": 10,
              "offset": 273
            },
            "start": {
              "col": 13,
              "line": 10,
              "offset": 267
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 35,
              "line": 10,
              "offset": 289
            },
            "start": {
              "col": 32,
              "line": 10,
              "offset": 286
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/logfileServer.ts",
      "start": {
        "col": 20,
        "line": 14,
        "offset": 406
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
      "end": {
        "col": 57,
        "line": 14,
        "offset": 457
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "file",
              "location": {
                "end": {
                  "col": 15,
                  "line": 11,
                  "offset": 354
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 11,
                  "line": 11,
                  "offset": 350
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 57,
                  "line": 14,
                  "offset": 457
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 20,
                  "line": 14,
                  "offset": 420
                }
              },
              "path.resolve('ftp/quarantine/', file)"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 24,
                  "line": 11,
                  "offset": 363
                },
                "path": "routes/quarantineServer.ts",
                "start": {
                  "col": 18,
                  "line": 11,
                  "offset": 357
                }
              },
              "params"
            ]
          ]
        },
        "fingerprint": "b63e4f429cf1e1ec583179c073415fef8f2f5962f472dec6d360f25cba12a7a9b9f55a1ded242cfa05827ee23a9d89aafff68d871dd32580e783f6f6d1536c1a_0",
        "is_ignored": false,
        "lines": "      res.sendFile(path.resolve('ftp/quarantine/', file))",
        "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-73: External Control of File Name or Path"
          ],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/7DJk",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$METH": {
            "abstract_content": "sendFile",
            "end": {
              "col": 19,
              "line": 14,
              "offset": 419
            },
            "start": {
              "col": 11,
              "line": 14,
              "offset": 411
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 58,
              "line": 10,
              "offset": 319
            },
            "start": {
              "col": 54,
              "line": 10,
              "offset": 315
            }
          },
          "$QUERY": {
            "abstract_content": "path.resolve('ftp/quarantine/'file)",
            "end": {
              "col": 57,
              "line": 14,
              "offset": 457
            },
            "start": {
              "col": 20,
              "line": 14,
              "offset": 420
            }
          },
          "$REQ": {
            "abstract_content": "params",
            "end": {
              "col": 19,
              "line": 10,
              "offset": 280
            },
            "start": {
              "col": 13,
              "line": 10,
              "offset": 274
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 42,
              "line": 10,
              "offset": 303
            },
            "start": {
              "col": 39,
              "line": 10,
              "offset": 300
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "routes/quarantineServer.ts",
      "start": {
        "col": 20,
        "line": 14,
        "offset": 420
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 82,
        "line": 6,
        "offset": 276
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "queryParam",
              "location": {
                "end": {
                  "col": 19,
                  "line": 2,
                  "offset": 35
                },
                "path": "data/static/codefixes/localXssChallenge_1.ts",
                "start": {
                  "col": 9,
                  "line": 2,
                  "offset": 25
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 82,
                  "line": 6,
                  "offset": 276
                },
                "path": "data/static/codefixes/localXssChallenge_1.ts",
                "start": {
                  "col": 72,
                  "line": 6,
                  "offset": 266
                }
              },
              "queryParam"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 40,
                  "line": 2,
                  "offset": 56
                },
                "path": "data/static/codefixes/localXssChallenge_1.ts",
                "start": {
                  "col": 30,
                  "line": 2,
                  "offset": 46
                }
              },
              "this.route"
            ]
          ]
        },
        "fingerprint": "073c16cb7e92572e23f785bae4c02372cea7d2d89b6b77c8b7827b645a016bf19ff1ee6dc6ef5acf0d6c1e3b974ad2fbada3ba5f16bacde870fcf73072bc7009_0",
        "is_ignored": false,
        "lines": "      this.searchValue = this.sanitizer.bypassSecurityTrustResourceUrl(queryParam)",
        "message": "Detected the use of `bypassSecurityTrustResourceUrl`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustResourceUrl`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustResourceUrl",
            "end": {
              "col": 71,
              "line": 6,
              "offset": 265
            },
            "start": {
              "col": 41,
              "line": 6,
              "offset": 235
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 34,
              "line": 2,
              "offset": 50
            },
            "start": {
              "col": 30,
              "line": 2,
              "offset": 46
            }
          },
          "$Y": {
            "abstract_content": "route",
            "end": {
              "col": 40,
              "line": 2,
              "offset": 56
            },
            "start": {
              "col": 35,
              "line": 2,
              "offset": 51
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "data/static/codefixes/localXssChallenge_1.ts",
      "start": {
        "col": 72,
        "line": 6,
        "offset": 266
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 77,
        "line": 6,
        "offset": 271
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "queryParam",
              "location": {
                "end": {
                  "col": 19,
                  "line": 2,
                  "offset": 35
                },
                "path": "data/static/codefixes/localXssChallenge_3.ts",
                "start": {
                  "col": 9,
                  "line": 2,
                  "offset": 25
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 77,
                  "line": 6,
                  "offset": 271
                },
                "path": "data/static/codefixes/localXssChallenge_3.ts",
                "start": {
                  "col": 67,
                  "line": 6,
                  "offset": 261
                }
              },
              "queryParam"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 40,
                  "line": 2,
                  "offset": 56
                },
                "path": "data/static/codefixes/localXssChallenge_3.ts",
                "start": {
                  "col": 30,
                  "line": 2,
                  "offset": 46
                }
              },
              "this.route"
            ]
          ]
        },
        "fingerprint": "9d1205f2fba8ecf7ca108d686808d431b0a8869298642568e6041ca61e0f15ec5ad989c4bcd9b4926c19f506cffe44e9d153f7af3d2540c8610d331e5e989b6e_0",
        "is_ignored": false,
        "lines": "      this.searchValue = this.sanitizer.bypassSecurityTrustScript(queryParam)",
        "message": "Detected the use of `bypassSecurityTrustScript`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustScript`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustScript",
            "end": {
              "col": 66,
              "line": 6,
              "offset": 260
            },
            "start": {
              "col": 41,
              "line": 6,
              "offset": 235
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 34,
              "line": 2,
              "offset": 50
            },
            "start": {
              "col": 30,
              "line": 2,
              "offset": 46
            }
          },
          "$Y": {
            "abstract_content": "route",
            "end": {
              "col": 40,
              "line": 2,
              "offset": 56
            },
            "start": {
              "col": 35,
              "line": 2,
              "offset": 51
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "data/static/codefixes/localXssChallenge_3.ts",
      "start": {
        "col": 67,
        "line": 6,
        "offset": 261
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 76,
        "line": 6,
        "offset": 270
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "queryParam",
              "location": {
                "end": {
                  "col": 19,
                  "line": 2,
                  "offset": 35
                },
                "path": "data/static/codefixes/localXssChallenge_4.ts",
                "start": {
                  "col": 9,
                  "line": 2,
                  "offset": 25
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 76,
                  "line": 6,
                  "offset": 270
                },
                "path": "data/static/codefixes/localXssChallenge_4.ts",
                "start": {
                  "col": 66,
                  "line": 6,
                  "offset": 260
                }
              },
              "queryParam"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 40,
                  "line": 2,
                  "offset": 56
                },
                "path": "data/static/codefixes/localXssChallenge_4.ts",
                "start": {
                  "col": 30,
                  "line": 2,
                  "offset": 46
                }
              },
              "this.route"
            ]
          ]
        },
        "fingerprint": "7ec3cc8b3d2f8a62971d5f3d6e59d846fbc2a7ca1cade50785aab8175844b67c270a3a0db49d8afdd2fce81c2e7fb172e3b5b160460f6fab19c450e2ba378455_0",
        "is_ignored": false,
        "lines": "      this.searchValue = this.sanitizer.bypassSecurityTrustStyle(queryParam)",
        "message": "Detected the use of `bypassSecurityTrustStyle`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustStyle`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustStyle",
            "end": {
              "col": 65,
              "line": 6,
              "offset": 259
            },
            "start": {
              "col": 41,
              "line": 6,
              "offset": 235
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 34,
              "line": 2,
              "offset": 50
            },
            "start": {
              "col": 30,
              "line": 2,
              "offset": 46
            }
          },
          "$Y": {
            "abstract_content": "route",
            "end": {
              "col": 40,
              "line": 2,
              "offset": 56
            },
            "start": {
              "col": 35,
              "line": 2,
              "offset": 51
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "data/static/codefixes/localXssChallenge_4.ts",
      "start": {
        "col": 66,
        "line": 6,
        "offset": 260
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 97,
        "line": 45,
        "offset": 1709
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 97,
                  "line": 45,
                  "offset": 1709
                },
                "path": "data/static/codefixes/restfulXssChallenge_3.ts",
                "start": {
                  "col": 73,
                  "line": 45,
                  "offset": 1685
                }
              },
              "tableData[i].description"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 48,
                  "line": 45,
                  "offset": 1660
                },
                "path": "data/static/codefixes/restfulXssChallenge_3.ts",
                "start": {
                  "col": 34,
                  "line": 45,
                  "offset": 1646
                }
              },
              "this.sanitizer"
            ]
          ]
        },
        "fingerprint": "a06f2fd6a3145091d809823e34ecc8b7067278ee7a5f38e6a05a8d45a8562b3480198bb694d6a1a313ec43e72de7caa10c42585cd82252d7079398e94a1ec466_0",
        "is_ignored": false,
        "lines": "      tableData[i].description = this.sanitizer.bypassSecurityTrustHtml(tableData[i].description)",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 72,
              "line": 45,
              "offset": 1684
            },
            "start": {
              "col": 49,
              "line": 45,
              "offset": 1661
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 38,
              "line": 45,
              "offset": 1650
            },
            "start": {
              "col": 34,
              "line": 45,
              "offset": 1646
            }
          },
          "$Y": {
            "abstract_content": "sanitizer",
            "end": {
              "col": 48,
              "line": 45,
              "offset": 1660
            },
            "start": {
              "col": 39,
              "line": 45,
              "offset": 1651
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "data/static/codefixes/restfulXssChallenge_3.ts",
      "start": {
        "col": 73,
        "line": 45,
        "offset": 1685
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 99,
        "line": 59,
        "offset": 2085
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 99,
                  "line": 59,
                  "offset": 2085
                },
                "path": "data/static/codefixes/restfulXssChallenge_4.ts",
                "start": {
                  "col": 75,
                  "line": 59,
                  "offset": 2061
                }
              },
              "tableData[i].description"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 48,
                  "line": 59,
                  "offset": 2034
                },
                "path": "data/static/codefixes/restfulXssChallenge_4.ts",
                "start": {
                  "col": 34,
                  "line": 59,
                  "offset": 2020
                }
              },
              "this.sanitizer"
            ]
          ]
        },
        "fingerprint": "9c7befdb72a1951ee5060e69c60bfe44fc7b758985c41426f2a764855a2f528065cc76295bf2f3656bf8e9a039c9387359ccf0920567be44fd44c765705601e4_0",
        "is_ignored": false,
        "lines": "      tableData[i].description = this.sanitizer.bypassSecurityTrustScript(tableData[i].description)",
        "message": "Detected the use of `bypassSecurityTrustScript`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustScript`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustScript",
            "end": {
              "col": 74,
              "line": 59,
              "offset": 2060
            },
            "start": {
              "col": 49,
              "line": 59,
              "offset": 2035
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 38,
              "line": 59,
              "offset": 2024
            },
            "start": {
              "col": 34,
              "line": 59,
              "offset": 2020
            }
          },
          "$Y": {
            "abstract_content": "sanitizer",
            "end": {
              "col": 48,
              "line": 59,
              "offset": 2034
            },
            "start": {
              "col": 39,
              "line": 59,
              "offset": 2025
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "data/static/codefixes/restfulXssChallenge_4.ts",
      "start": {
        "col": 75,
        "line": 59,
        "offset": 2061
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 82,
        "line": 6,
        "offset": 276
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "queryParam",
              "location": {
                "end": {
                  "col": 19,
                  "line": 2,
                  "offset": 35
                },
                "path": "data/static/codefixes/xssBonusChallenge_2.ts",
                "start": {
                  "col": 9,
                  "line": 2,
                  "offset": 25
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 82,
                  "line": 6,
                  "offset": 276
                },
                "path": "data/static/codefixes/xssBonusChallenge_2.ts",
                "start": {
                  "col": 72,
                  "line": 6,
                  "offset": 266
                }
              },
              "queryParam"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 40,
                  "line": 2,
                  "offset": 56
                },
                "path": "data/static/codefixes/xssBonusChallenge_2.ts",
                "start": {
                  "col": 30,
                  "line": 2,
                  "offset": 46
                }
              },
              "this.route"
            ]
          ]
        },
        "fingerprint": "203a286d9290b88a643df11d7074284125aa07e0a3b705547bfaaf6407a1a2572e17242352a319205ad73f9cd2c17d0dbc146a3f44709b9c2bcc015d8e093a44_0",
        "is_ignored": false,
        "lines": "      this.searchValue = this.sanitizer.bypassSecurityTrustResourceUrl(queryParam)",
        "message": "Detected the use of `bypassSecurityTrustResourceUrl`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustResourceUrl`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustResourceUrl",
            "end": {
              "col": 71,
              "line": 6,
              "offset": 265
            },
            "start": {
              "col": 41,
              "line": 6,
              "offset": 235
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 34,
              "line": 2,
              "offset": 50
            },
            "start": {
              "col": 30,
              "line": 2,
              "offset": 46
            }
          },
          "$Y": {
            "abstract_content": "route",
            "end": {
              "col": 40,
              "line": 2,
              "offset": 56
            },
            "start": {
              "col": 35,
              "line": 2,
              "offset": 51
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "data/static/codefixes/xssBonusChallenge_2.ts",
      "start": {
        "col": 72,
        "line": 6,
        "offset": 266
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 91,
        "line": 81,
        "offset": 3767
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "feedbacks",
              "location": {
                "end": {
                  "col": 53,
                  "line": 77,
                  "offset": 3387
                },
                "path": "frontend/src/app/about/about.component.ts",
                "start": {
                  "col": 44,
                  "line": 77,
                  "offset": 3378
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 91,
                  "line": 81,
                  "offset": 3767
                },
                "path": "frontend/src/app/about/about.component.ts",
                "start": {
                  "col": 71,
                  "line": 81,
                  "offset": 3747
                }
              },
              "feedbacks[i].comment"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 53,
                  "line": 77,
                  "offset": 3387
                },
                "path": "frontend/src/app/about/about.component.ts",
                "start": {
                  "col": 44,
                  "line": 77,
                  "offset": 3378
                }
              },
              "feedbacks"
            ]
          ]
        },
        "fingerprint": "d34e269f12c60ee24b13d756bb31c4be4acadbae6501aa45045ca363ede39fb07888dfdaaa82f3b2bc3baab89bf590cd9e580bb2bb5dca143665abb5ba143b7c_0",
        "is_ignored": false,
        "lines": "        feedbacks[i].comment = this.sanitizer.bypassSecurityTrustHtml(feedbacks[i].comment)",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 70,
              "line": 81,
              "offset": 3746
            },
            "start": {
              "col": 47,
              "line": 81,
              "offset": 3723
            }
          },
          "$X": {
            "abstract_content": "feedbacks",
            "end": {
              "col": 53,
              "line": 77,
              "offset": 3387
            },
            "start": {
              "col": 44,
              "line": 77,
              "offset": 3378
            }
          },
          "$Y": {
            "abstract_content": "feedbacks[i].comment",
            "end": {
              "col": 91,
              "line": 81,
              "offset": 3767
            },
            "start": {
              "col": 71,
              "line": 81,
              "offset": 3747
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "frontend/src/app/about/about.component.ts",
      "start": {
        "col": 71,
        "line": 81,
        "offset": 3747
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 83,
        "line": 66,
        "offset": 2777
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 83,
                  "line": 66,
                  "offset": 2777
                },
                "path": "frontend/src/app/administration/administration.component.ts",
                "start": {
                  "col": 67,
                  "line": 66,
                  "offset": 2761
                }
              },
              "feedback.comment"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 83,
                  "line": 66,
                  "offset": 2777
                },
                "path": "frontend/src/app/administration/administration.component.ts",
                "start": {
                  "col": 67,
                  "line": 66,
                  "offset": 2761
                }
              },
              "feedback.comment"
            ]
          ]
        },
        "fingerprint": "68342ec23a3f112b6eba40249716881e634d533910dc2f09e4e8654bcf4104cd36003475641474a1bfe12e4f3853ccc2bdefd5463cd370829d0f46b9c3816fb5_0",
        "is_ignored": false,
        "lines": "        feedback.comment = this.sanitizer.bypassSecurityTrustHtml(feedback.comment)",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 66,
              "line": 66,
              "offset": 2760
            },
            "start": {
              "col": 43,
              "line": 66,
              "offset": 2737
            }
          },
          "$X": {
            "abstract_content": "feedback",
            "end": {
              "col": 75,
              "line": 66,
              "offset": 2769
            },
            "start": {
              "col": 67,
              "line": 66,
              "offset": 2761
            }
          },
          "$Y": {
            "abstract_content": "comment",
            "end": {
              "col": 83,
              "line": 66,
              "offset": 2777
            },
            "start": {
              "col": 76,
              "line": 66,
              "offset": 2770
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "frontend/src/app/administration/administration.component.ts",
      "start": {
        "col": 67,
        "line": 66,
        "offset": 2761
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 71,
        "line": 45,
        "offset": 1777
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "data",
              "location": {
                "end": {
                  "col": 58,
                  "line": 44,
                  "offset": 1695
                },
                "path": "frontend/src/app/data-export/data-export.component.ts",
                "start": {
                  "col": 54,
                  "line": 44,
                  "offset": 1691
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 71,
                  "line": 45,
                  "offset": 1777
                },
                "path": "frontend/src/app/data-export/data-export.component.ts",
                "start": {
                  "col": 61,
                  "line": 45,
                  "offset": 1767
                }
              },
              "data.image"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 58,
                  "line": 44,
                  "offset": 1695
                },
                "path": "frontend/src/app/data-export/data-export.component.ts",
                "start": {
                  "col": 54,
                  "line": 44,
                  "offset": 1691
                }
              },
              "data"
            ]
          ]
        },
        "fingerprint": "85afa3cc8291e2d9578165565c66699b670a951db1df4fcebf91f8936ff9b3d2ac8ebe3c03aff568dfb2133d4147e4aff4112e25268d5ab5e7ee9cbb71fc72a2_0",
        "is_ignored": false,
        "lines": "      this.captcha = this.sanitizer.bypassSecurityTrustHtml(data.image)",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 60,
              "line": 45,
              "offset": 1766
            },
            "start": {
              "col": 37,
              "line": 45,
              "offset": 1743
            }
          },
          "$X": {
            "abstract_content": "data",
            "end": {
              "col": 58,
              "line": 44,
              "offset": 1695
            },
            "start": {
              "col": 54,
              "line": 44,
              "offset": 1691
            }
          },
          "$Y": {
            "abstract_content": "data.image",
            "end": {
              "col": 71,
              "line": 45,
              "offset": 1777
            },
            "start": {
              "col": 61,
              "line": 45,
              "offset": 1767
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "frontend/src/app/data-export/data-export.component.ts",
      "start": {
        "col": 61,
        "line": 45,
        "offset": 1767
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 99,
        "line": 182,
        "offset": 9164
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "challenge",
              "location": {
                "end": {
                  "col": 34,
                  "line": 181,
                  "offset": 9051
                },
                "path": "frontend/src/app/score-board/score-board.component.ts",
                "start": {
                  "col": 25,
                  "line": 181,
                  "offset": 9042
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 99,
                  "line": 182,
                  "offset": 9164
                },
                "path": "frontend/src/app/score-board/score-board.component.ts",
                "start": {
                  "col": 68,
                  "line": 182,
                  "offset": 9133
                }
              },
              "challenge.description as string"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 34,
                  "line": 181,
                  "offset": 9051
                },
                "path": "frontend/src/app/score-board/score-board.component.ts",
                "start": {
                  "col": 25,
                  "line": 181,
                  "offset": 9042
                }
              },
              "challenge"
            ]
          ]
        },
        "fingerprint": "adbffdb9f49957df0298e524fd76265ae139166f86e47f9e2f68b948b5af3a4d99f1a32a625dd7e3a7c9463fbfdd97e56ab38024cc03a9264cac3d1d7e9220a4_0",
        "is_ignored": false,
        "lines": "    challenge.description = this.sanitizer.bypassSecurityTrustHtml(challenge.description as string)",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 67,
              "line": 182,
              "offset": 9132
            },
            "start": {
              "col": 44,
              "line": 182,
              "offset": 9109
            }
          },
          "$X": {
            "abstract_content": "challenge",
            "end": {
              "col": 34,
              "line": 181,
              "offset": 9051
            },
            "start": {
              "col": 25,
              "line": 181,
              "offset": 9042
            }
          },
          "$Y": {
            "abstract_content": "challenge.description as string",
            "end": {
              "col": 99,
              "line": 182,
              "offset": 9164
            },
            "start": {
              "col": 68,
              "line": 182,
              "offset": 9133
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "frontend/src/app/score-board/score-board.component.ts",
      "start": {
        "col": 68,
        "line": 182,
        "offset": 9133
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 97,
        "line": 126,
        "offset": 5410
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "tableData",
              "location": {
                "end": {
                  "col": 37,
                  "line": 124,
                  "offset": 5146
                },
                "path": "frontend/src/app/search-result/search-result.component.ts",
                "start": {
                  "col": 28,
                  "line": 124,
                  "offset": 5137
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 97,
                  "line": 126,
                  "offset": 5410
                },
                "path": "frontend/src/app/search-result/search-result.component.ts",
                "start": {
                  "col": 73,
                  "line": 126,
                  "offset": 5386
                }
              },
              "tableData[i].description"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 37,
                  "line": 124,
                  "offset": 5146
                },
                "path": "frontend/src/app/search-result/search-result.component.ts",
                "start": {
                  "col": 28,
                  "line": 124,
                  "offset": 5137
                }
              },
              "tableData"
            ]
          ]
        },
        "fingerprint": "45111ba9778ff2cd07d5ad81eec777286bd4a7b768dffca8d769f9440bba7fd1144547f37458ad0bcdcd1887e3d54e95d7ad7542a1cd9f16dcb2083b7cedc4da_0",
        "is_ignored": false,
        "lines": "      tableData[i].description = this.sanitizer.bypassSecurityTrustHtml(tableData[i].description) // vuln-code-snippet vuln-line restfulXssChallenge",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 72,
              "line": 126,
              "offset": 5385
            },
            "start": {
              "col": 49,
              "line": 126,
              "offset": 5362
            }
          },
          "$X": {
            "abstract_content": "tableData",
            "end": {
              "col": 37,
              "line": 124,
              "offset": 5146
            },
            "start": {
              "col": 28,
              "line": 124,
              "offset": 5137
            }
          },
          "$Y": {
            "abstract_content": "tableData[i].description",
            "end": {
              "col": 97,
              "line": 126,
              "offset": 5410
            },
            "start": {
              "col": 73,
              "line": 126,
              "offset": 5386
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "frontend/src/app/search-result/search-result.component.ts",
      "start": {
        "col": 73,
        "line": 126,
        "offset": 5386
      }
    },
    {
      "check_id": "typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
      "end": {
        "col": 75,
        "line": 152,
        "offset": 6413
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "queryParam",
              "location": {
                "end": {
                  "col": 19,
                  "line": 145,
                  "offset": 5995
                },
                "path": "frontend/src/app/search-result/search-result.component.ts",
                "start": {
                  "col": 9,
                  "line": 145,
                  "offset": 5985
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 75,
                  "line": 152,
                  "offset": 6413
                },
                "path": "frontend/src/app/search-result/search-result.component.ts",
                "start": {
                  "col": 65,
                  "line": 152,
                  "offset": 6403
                }
              },
              "queryParam"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 40,
                  "line": 145,
                  "offset": 6016
                },
                "path": "frontend/src/app/search-result/search-result.component.ts",
                "start": {
                  "col": 30,
                  "line": 145,
                  "offset": 6006
                }
              },
              "this.route"
            ]
          ]
        },
        "fingerprint": "6cfbc0539ac7aa913fa6593c9f79e63ee056bf922143c09ea4a376bec40afe67a82cbac41fc05790d293d9a0c449214a15f8198b1f3e73a96111b95952cd4a89_0",
        "is_ignored": false,
        "lines": "      this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam) // vuln-code-snippet vuln-line localXssChallenge xssBonusChallenge",
        "message": "Detected the use of `bypassSecurityTrustHtml`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `bypassSecurityTrustHtml`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://angular.io/api/platform-browser/DomSanitizer",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "shortlink": "https://sg.run/KWxP",
          "source": "https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "angular",
            "browser"
          ]
        },
        "metavars": {
          "$TRUST": {
            "abstract_content": "bypassSecurityTrustHtml",
            "end": {
              "col": 64,
              "line": 152,
              "offset": 6402
            },
            "start": {
              "col": 41,
              "line": 152,
              "offset": 6379
            }
          },
          "$X": {
            "abstract_content": "this",
            "end": {
              "col": 34,
              "line": 145,
              "offset": 6010
            },
            "start": {
              "col": 30,
              "line": 145,
              "offset": 6006
            }
          },
          "$Y": {
            "abstract_content": "route",
            "end": {
              "col": 40,
              "line": 145,
              "offset": 6016
            },
            "start": {
              "col": 35,
              "line": 145,
              "offset": 6011
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "frontend/src/app/search-result/search-result.component.ts",
      "start": {
        "col": 65,
        "line": 152,
        "offset": 6403
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
      "end": {
        "col": 76,
        "line": 241,
        "offset": 10533
      },
      "extra": {
        "fingerprint": "37ef9343063a9883c51303f5c0c1d63dd6bc034eef28029308dd57cffba672988833806d58dacb0f5b67f2d81123c593b59868bd453a8d87803c7eeffe2a5866_0",
        "is_ignored": false,
        "lines": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-snippet vuln-line directoryListingChallenge",
        "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-548: Exposure of Information Through Directory Listing"
          ],
          "deepsemgrep": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://www.npmjs.com/package/serve-index",
            "https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/"
          ],
          "shortlink": "https://sg.run/DX2G",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": {
              "col": 6,
              "line": 241,
              "offset": 10463
            },
            "propagated_value": {
              "svalue_abstract_content": "express()",
              "svalue_end": {
                "col": 22,
                "line": 91,
                "offset": 4186
              },
              "svalue_start": {
                "col": 13,
                "line": 91,
                "offset": 4177
              }
            },
            "start": {
              "col": 3,
              "line": 241,
              "offset": 10460
            }
          },
          "$SERVEINDEX": {
            "abstract_content": "'serve-index'",
            "end": {
              "col": 41,
              "line": 34,
              "offset": 1468
            },
            "start": {
              "col": 28,
              "line": 34,
              "offset": 1455
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "server.ts",
      "start": {
        "col": 3,
        "line": 241,
        "offset": 10460
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
      "end": {
        "col": 115,
        "line": 246,
        "offset": 10974
      },
      "extra": {
        "fingerprint": "37ef9343063a9883c51303f5c0c1d63dd6bc034eef28029308dd57cffba672988833806d58dacb0f5b67f2d81123c593b59868bd453a8d87803c7eeffe2a5866_1",
        "is_ignored": false,
        "lines": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
        "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-548: Exposure of Information Through Directory Listing"
          ],
          "deepsemgrep": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://www.npmjs.com/package/serve-index",
            "https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/"
          ],
          "shortlink": "https://sg.run/DX2G",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": {
              "col": 6,
              "line": 246,
              "offset": 10865
            },
            "propagated_value": {
              "svalue_abstract_content": "express()",
              "svalue_end": {
                "col": 22,
                "line": 91,
                "offset": 4186
              },
              "svalue_start": {
                "col": 13,
                "line": 91,
                "offset": 4177
              }
            },
            "start": {
              "col": 3,
              "line": 246,
              "offset": 10862
            }
          },
          "$SERVEINDEX": {
            "abstract_content": "'serve-index'",
            "end": {
              "col": 41,
              "line": 34,
              "offset": 1468
            },
            "start": {
              "col": 28,
              "line": 34,
              "offset": 1455
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "server.ts",
      "start": {
        "col": 3,
        "line": 246,
        "offset": 10862
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
      "end": {
        "col": 103,
        "line": 250,
        "offset": 11222
      },
      "extra": {
        "fingerprint": "37ef9343063a9883c51303f5c0c1d63dd6bc034eef28029308dd57cffba672988833806d58dacb0f5b67f2d81123c593b59868bd453a8d87803c7eeffe2a5866_2",
        "is_ignored": false,
        "lines": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge",
        "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-548: Exposure of Information Through Directory Listing"
          ],
          "deepsemgrep": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://www.npmjs.com/package/serve-index",
            "https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/"
          ],
          "shortlink": "https://sg.run/DX2G",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": {
              "col": 6,
              "line": 250,
              "offset": 11125
            },
            "propagated_value": {
              "svalue_abstract_content": "express()",
              "svalue_end": {
                "col": 22,
                "line": 91,
                "offset": 4186
              },
              "svalue_start": {
                "col": 13,
                "line": 91,
                "offset": 4177
              }
            },
            "start": {
              "col": 3,
              "line": 250,
              "offset": 11122
            }
          },
          "$SERVEINDEX": {
            "abstract_content": "'serve-index'",
            "end": {
              "col": 41,
              "line": 34,
              "offset": 1468
            },
            "start": {
              "col": 28,
              "line": 34,
              "offset": 1455
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "server.ts",
      "start": {
        "col": 3,
        "line": 250,
        "offset": 11122
      }
    },
    {
      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
      "end": {
        "col": 162,
        "line": 5,
        "offset": 428
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "criteria",
              "location": {
                "end": {
                  "col": 17,
                  "line": 3,
                  "offset": 126
                },
                "path": "data/static/codefixes/dbSchemaChallenge_1.ts",
                "start": {
                  "col": 9,
                  "line": 3,
                  "offset": 118
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 162,
                  "line": 5,
                  "offset": 428
                },
                "path": "data/static/codefixes/dbSchemaChallenge_1.ts",
                "start": {
                  "col": 28,
                  "line": 5,
                  "offset": 294
                }
              },
              "\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\""
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 69,
                  "line": 3,
                  "offset": 178
                },
                "path": "data/static/codefixes/dbSchemaChallenge_1.ts",
                "start": {
                  "col": 60,
                  "line": 3,
                  "offset": 169
                }
              },
              "req.query"
            ]
          ]
        },
        "fingerprint": "01b8e724b9b2ca911743bd18718f705749ee2d12329b08125c003a1141def61cecdb34215ced0cd85fd4a0209fa6f4e024c13099eb57a6251a313830acb5172a_0",
        "is_ignored": false,
        "lines": "    models.sequelize.query(\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\")",
        "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
          ],
          "shortlink": "https://sg.run/gjoe",
          "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "models",
            "end": {
              "col": 11,
              "line": 5,
              "offset": 277
            },
            "start": {
              "col": 5,
              "line": 5,
              "offset": 271
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 2,
              "offset": 89
            },
            "start": {
              "col": 40,
              "line": 2,
              "offset": 85
            }
          },
          "$QUERY": {
            "abstract_content": "\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\"",
            "end": {
              "col": 162,
              "line": 5,
              "offset": 428
            },
            "start": {
              "col": 28,
              "line": 5,
              "offset": 294
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 63,
              "line": 3,
              "offset": 172
            },
            "start": {
              "col": 60,
              "line": 3,
              "offset": 169
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 2,
              "offset": 73
            },
            "start": {
              "col": 25,
              "line": 2,
              "offset": 70
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "data/static/codefixes/dbSchemaChallenge_1.ts",
      "start": {
        "col": 28,
        "line": 5,
        "offset": 294
      }
    },
    {
      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
      "end": {
        "col": 159,
        "line": 11,
        "offset": 560
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "criteria",
              "location": {
                "end": {
                  "col": 17,
                  "line": 5,
                  "offset": 171
                },
                "path": "data/static/codefixes/dbSchemaChallenge_3.ts",
                "start": {
                  "col": 9,
                  "line": 5,
                  "offset": 163
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 159,
                  "line": 11,
                  "offset": 560
                },
                "path": "data/static/codefixes/dbSchemaChallenge_3.ts",
                "start": {
                  "col": 28,
                  "line": 11,
                  "offset": 429
                }
              },
              "`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 69,
                  "line": 5,
                  "offset": 223
                },
                "path": "data/static/codefixes/dbSchemaChallenge_3.ts",
                "start": {
                  "col": 60,
                  "line": 5,
                  "offset": 214
                }
              },
              "req.query"
            ]
          ]
        },
        "fingerprint": "4ded94d6131f70079d7885c7bb41acbbcacd1f422be56352873bb2463cf3648e663483dbf43f137e12b1f4f7e7f4b2f875abb2f7e72fcd74695a7e9c05dadfc6_0",
        "is_ignored": false,
        "lines": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
        "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
          ],
          "shortlink": "https://sg.run/gjoe",
          "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "models",
            "end": {
              "col": 11,
              "line": 11,
              "offset": 412
            },
            "start": {
              "col": 5,
              "line": 11,
              "offset": 406
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 4,
              "offset": 134
            },
            "start": {
              "col": 40,
              "line": 4,
              "offset": 130
            }
          },
          "$QUERY": {
            "abstract_content": "`SELECT * FROM Products WHERE ((name LIKE '%criteria%' OR description LIKE '%criteria%') AND deletedAt IS NULL) ORDER BY name",
            "end": {
              "col": 159,
              "line": 11,
              "offset": 560
            },
            "start": {
              "col": 28,
              "line": 11,
              "offset": 429
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 63,
              "line": 5,
              "offset": 217
            },
            "start": {
              "col": 60,
              "line": 5,
              "offset": 214
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 4,
              "offset": 118
            },
            "start": {
              "col": 25,
              "line": 4,
              "offset": 115
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "data/static/codefixes/dbSchemaChallenge_3.ts",
      "start": {
        "col": 28,
        "line": 11,
        "offset": 429
      }
    },
    {
      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
      "end": {
        "col": 159,
        "line": 6,
        "offset": 467
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "criteria",
              "location": {
                "end": {
                  "col": 17,
                  "line": 3,
                  "offset": 126
                },
                "path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
                "start": {
                  "col": 9,
                  "line": 3,
                  "offset": 118
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 159,
                  "line": 6,
                  "offset": 467
                },
                "path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
                "start": {
                  "col": 28,
                  "line": 6,
                  "offset": 336
                }
              },
              "`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 69,
                  "line": 3,
                  "offset": 178
                },
                "path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
                "start": {
                  "col": 60,
                  "line": 3,
                  "offset": 169
                }
              },
              "req.query"
            ]
          ]
        },
        "fingerprint": "68ee178dbe58f781b2d43de36ca8e69a77939878c90876e25922769ef38429441be8eded69f44074b38e9a176e2c8dbb515131767ba2f80d3acce9c329deae72_0",
        "is_ignored": false,
        "lines": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
        "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
          ],
          "shortlink": "https://sg.run/gjoe",
          "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "models",
            "end": {
              "col": 11,
              "line": 6,
              "offset": 319
            },
            "start": {
              "col": 5,
              "line": 6,
              "offset": 313
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 2,
              "offset": 89
            },
            "start": {
              "col": 40,
              "line": 2,
              "offset": 85
            }
          },
          "$QUERY": {
            "abstract_content": "`SELECT * FROM Products WHERE ((name LIKE '%criteria%' OR description LIKE '%criteria%') AND deletedAt IS NULL) ORDER BY name",
            "end": {
              "col": 159,
              "line": 6,
              "offset": 467
            },
            "start": {
              "col": 28,
              "line": 6,
              "offset": 336
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 63,
              "line": 3,
              "offset": 172
            },
            "start": {
              "col": 60,
              "line": 3,
              "offset": 169
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 2,
              "offset": 73
            },
            "start": {
              "col": 25,
              "line": 2,
              "offset": 70
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
      "start": {
        "col": 28,
        "line": 6,
        "offset": 336
      }
    },
    {
      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
      "end": {
        "col": 159,
        "line": 10,
        "offset": 599
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "criteria",
              "location": {
                "end": {
                  "col": 17,
                  "line": 3,
                  "offset": 126
                },
                "path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
                "start": {
                  "col": 9,
                  "line": 3,
                  "offset": 118
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 159,
                  "line": 10,
                  "offset": 599
                },
                "path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
                "start": {
                  "col": 28,
                  "line": 10,
                  "offset": 468
                }
              },
              "`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 69,
                  "line": 3,
                  "offset": 178
                },
                "path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
                "start": {
                  "col": 60,
                  "line": 3,
                  "offset": 169
                }
              },
              "req.query"
            ]
          ]
        },
        "fingerprint": "1a9181d8de1aa222fc91e705cd7647a3698dfc4a64e7e64c18fa8e37725eb152473fa798ec9b48f28a3bedc8c7937ff6d931e6e481be2ced162543fced5c95f4_0",
        "is_ignored": false,
        "lines": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
        "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
          ],
          "shortlink": "https://sg.run/gjoe",
          "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "models",
            "end": {
              "col": 11,
              "line": 10,
              "offset": 451
            },
            "start": {
              "col": 5,
              "line": 10,
              "offset": 445
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 2,
              "offset": 89
            },
            "start": {
              "col": 40,
              "line": 2,
              "offset": 85
            }
          },
          "$QUERY": {
            "abstract_content": "`SELECT * FROM Products WHERE ((name LIKE '%criteria%' OR description LIKE '%criteria%') AND deletedAt IS NULL) ORDER BY name",
            "end": {
              "col": 159,
              "line": 10,
              "offset": 599
            },
            "start": {
              "col": 28,
              "line": 10,
              "offset": 468
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 63,
              "line": 3,
              "offset": 172
            },
            "start": {
              "col": 60,
              "line": 3,
              "offset": 169
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 2,
              "offset": 73
            },
            "start": {
              "col": 25,
              "line": 2,
              "offset": 70
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
      "start": {
        "col": 28,
        "line": 10,
        "offset": 468
      }
    },
    {
      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
      "end": {
        "col": 169,
        "line": 36,
        "offset": 1652
      },
      "extra": {
        "dataflow_trace": {
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 169,
                  "line": 36,
                  "offset": 1652
                },
                "path": "routes/login.ts",
                "start": {
                  "col": 28,
                  "line": 36,
                  "offset": 1511
                }
              },
              "`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 74,
                  "line": 36,
                  "offset": 1557
                },
                "path": "routes/login.ts",
                "start": {
                  "col": 66,
                  "line": 36,
                  "offset": 1549
                }
              },
              "req.body"
            ]
          ]
        },
        "fingerprint": "e29f08dbd2946891b0c90accff7796713dcaca241419798b4c522f33687cd72500e14bb38a697914f790af772ad510895f9c025d17ec9b6de6a6c8c8effd61fa_0",
        "is_ignored": false,
        "lines": "    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge loginBenderChallenge loginJimChallenge",
        "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
          ],
          "shortlink": "https://sg.run/gjoe",
          "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "'../models/index'",
            "end": {
              "col": 42,
              "line": 6,
              "offset": 162
            },
            "start": {
              "col": 25,
              "line": 6,
              "offset": 145
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 34,
              "offset": 1398
            },
            "start": {
              "col": 40,
              "line": 34,
              "offset": 1394
            }
          },
          "$QUERY": {
            "abstract_content": "`SELECT * FROM Users WHERE email = 'req.body.email||''' AND password = 'security.hash(req.body.password||'')' AND deletedAt IS NULL",
            "end": {
              "col": 169,
              "line": 36,
              "offset": 1652
            },
            "start": {
              "col": 28,
              "line": 36,
              "offset": 1511
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 69,
              "line": 36,
              "offset": 1552
            },
            "start": {
              "col": 66,
              "line": 36,
              "offset": 1549
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 34,
              "offset": 1382
            },
            "start": {
              "col": 25,
              "line": 34,
              "offset": 1379
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "routes/login.ts",
      "start": {
        "col": 28,
        "line": 36,
        "offset": 1511
      }
    },
    {
      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
      "end": {
        "col": 159,
        "line": 23,
        "offset": 986
      },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "criteria",
              "location": {
                "end": {
                  "col": 17,
                  "line": 21,
                  "offset": 687
                },
                "path": "routes/search.ts",
                "start": {
                  "col": 9,
                  "line": 21,
                  "offset": 679
                }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 159,
                  "line": 23,
                  "offset": 986
                },
                "path": "routes/search.ts",
                "start": {
                  "col": 28,
                  "line": 23,
                  "offset": 855
                }
              },
              "`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": {
                  "col": 69,
                  "line": 21,
                  "offset": 739
                },
                "path": "routes/search.ts",
                "start": {
                  "col": 60,
                  "line": 21,
                  "offset": 730
                }
              },
              "req.query"
            ]
          ]
        },
        "fingerprint": "b6affefdd7d925bda72d6fcb4a8438918e7c945832b11f5af9e1005bce00871fa658a2450e5f137594625a98bc9da9557b9ad28ddf99f6e633a725eb0c613002_0",
        "is_ignored": false,
        "lines": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge",
        "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "deepsemgrep": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
          ],
          "shortlink": "https://sg.run/gjoe",
          "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "'../models/index'",
            "end": {
              "col": 42,
              "line": 6,
              "offset": 162
            },
            "start": {
              "col": 25,
              "line": 6,
              "offset": 145
            }
          },
          "$NEXT": {
            "abstract_content": "next",
            "end": {
              "col": 44,
              "line": 20,
              "offset": 650
            },
            "start": {
              "col": 40,
              "line": 20,
              "offset": 646
            }
          },
          "$QUERY": {
            "abstract_content": "`SELECT * FROM Products WHERE ((name LIKE '%criteria%' OR description LIKE '%criteria%') AND deletedAt IS NULL) ORDER BY name",
            "end": {
              "col": 159,
              "line": 23,
              "offset": 986
            },
            "start": {
              "col": 28,
              "line": 23,
              "offset": 855
            }
          },
          "$REQ": {
            "abstract_content": "req",
            "end": {
              "col": 63,
              "line": 21,
              "offset": 733
            },
            "start": {
              "col": 60,
              "line": 21,
              "offset": 730
            }
          },
          "$RES": {
            "abstract_content": "res",
            "end": {
              "col": 28,
              "line": 20,
              "offset": 634
            },
            "start": {
              "col": 25,
              "line": 20,
              "offset": 631
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "routes/search.ts",
      "start": {
        "col": 28,
        "line": 23,
        "offset": 855
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
      "end": {
        "col": 63,
        "line": 53,
        "offset": 2526
      },
      "extra": {
        "fingerprint": "4b857f84495ca28fded9d997e9774dc8286e80ae7ec18e9ce7fae7f3ce256f3a545773d1300a2a5a5b85358398931131cfacbb54b3f79d0b1401e4144bc91247_0",
        "is_ignored": false,
        "lines": "exports.isAuthorized = () => expressJwt({ secret: publicKey })",
        "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "metadata": {
          "asvs": {
            "control_id": "3.5.3 Insecue Stateless Session Tokens",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
            "section": "V3: Session Management Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "cwe2021-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "shortlink": "https://sg.run/kXNo",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
          "source-rule-url": "https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$JWT": {
            "abstract_content": "'express-jwt'",
            "end": {
              "col": 41,
              "line": 11,
              "offset": 317
            },
            "start": {
              "col": 28,
              "line": 11,
              "offset": 304
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "lib/insecurity.ts",
      "start": {
        "col": 30,
        "line": 53,
        "offset": 2493
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
      "end": {
        "col": 67,
        "line": 54,
        "offset": 2593
      },
      "extra": {
        "fingerprint": "4b857f84495ca28fded9d997e9774dc8286e80ae7ec18e9ce7fae7f3ce256f3a545773d1300a2a5a5b85358398931131cfacbb54b3f79d0b1401e4144bc91247_1",
        "is_ignored": false,
        "lines": "exports.denyAll = () => expressJwt({ secret: '' + Math.random() })",
        "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "metadata": {
          "asvs": {
            "control_id": "3.5.3 Insecue Stateless Session Tokens",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
            "section": "V3: Session Management Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "cwe2021-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "shortlink": "https://sg.run/kXNo",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
          "source-rule-url": "https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "express"
          ]
        },
        "metavars": {
          "$JWT": {
            "abstract_content": "'express-jwt'",
            "end": {
              "col": 41,
              "line": 11,
              "offset": 317
            },
            "start": {
              "col": 28,
              "line": 11,
              "offset": 304
            }
          }
        },
        "severity": "WARNING"
      },
      "path": "lib/insecurity.ts",
      "start": {
        "col": 25,
        "line": 54,
        "offset": 2551
      }
    }
  ],
  "version": "1.2.1"
}
